//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using NHibernate.Envers.Exceptions;
using NUnit.Framework;
using SharpTestsEx;

namespace NHibernate.Envers.Tests.Integration.Interfaces.Inheritance.AllAudited
{
	using System.Threading.Tasks;
	public abstract partial class AbstractAllAuditedTest : TestBase
	{

		[Test]
		public async Task VerifyRevisionsAsync()
		{
			(await (AuditReader().GetRevisionsAsync(typeof (AuditedImplementor), aiId)).ConfigureAwait(false))
				.Should().Have.SameSequenceAs(1, 2);
		}

		[Test]
		public async Task VerifyRetrieveAuditedAsync()
		{
			var ai = await (Session.GetAsync<AuditedImplementor>(aiId)).ConfigureAwait(false);
			var si = await (Session.GetAsync<ISimple>(aiId)).ConfigureAwait(false);
			var aiRev1 = await (AuditReader().FindAsync<AuditedImplementor>(aiId, 1)).ConfigureAwait(false);
			var siRev1 = await (AuditReader().FindAsync<ISimple>(aiId, 1)).ConfigureAwait(false);
			var aiRev2 = await (AuditReader().FindAsync<AuditedImplementor>(aiId, 2)).ConfigureAwait(false);
			var siRev2 = await (AuditReader().FindAsync<ISimple>(aiId, 2)).ConfigureAwait(false);

			ai.Data.Should().Be.EqualTo("La data 2");
			si.Data.Should().Be.EqualTo("La data 2");
			aiRev1.Data.Should().Be.EqualTo("La data");
			siRev1.Data.Should().Be.EqualTo("La data");
			aiRev2.Data.Should().Be.EqualTo("La data 2");
			siRev2.Data.Should().Be.EqualTo("La data 2");
		}

		[Test]
		public async Task VerifyRetrieveNonAuditedAsync()
		{
			var nai = await (Session.GetAsync<NonAuditedImplementor>(naiId)).ConfigureAwait(false);
			var si = await (Session.GetAsync<ISimple>(naiId)).ConfigureAwait(false);

			si.Data.Should().Be.EqualTo(nai.Data);

			Assert.ThrowsAsync<NotAuditedException>(() =>
			   AuditReader().FindAsync<NonAuditedImplementor>(naiId, 1));

			(await (AuditReader().FindAsync<ISimple>(naiId, 1)).ConfigureAwait(false))
				.Should().Be.Null();
		}
	}
}