//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections.Generic;
using System.Transactions;
using NHibernate.Envers.Configuration;
using NHibernate.Envers.Exceptions;
using NHibernate.Envers.Tests.Entities;
using NHibernate.Envers.Tests.Integration.Collection.NoRevision;
using NUnit.Framework;

namespace NHibernate.Envers.Tests.Integration.Basic
{
	using System.Threading.Tasks;
	public partial class OutsideTransactionTest : TestBase
	{

		[Test]
		public void ShouldThrowIfInsertOutsideActiveTransactionAsync()
		{
			// Illegal insertion of entity outside of active transaction.
			var entity = new StrTestEntity {Str = "data"};
			Assert.ThrowsAsync<AuditException>(async () =>
			                              	{
															await (Session.SaveAsync(entity)).ConfigureAwait(false);
			                              		await (Session.FlushAsync()).ConfigureAwait(false);
			                              	});
		}

		[Test]
		public async Task ShouldThrowIfUpdateOutsideActiveTransactionAsync()
		{
			var entity = new StrTestEntity { Str = "data" };
			using (var tx = Session.BeginTransaction())
			{
				await (Session.SaveAsync(entity)).ConfigureAwait(false);
				await (tx.CommitAsync()).ConfigureAwait(false);
			}
			// Illegal modification of entity state outside of active transaction.
			entity.Str = "modified data";
			Assert.ThrowsAsync<AuditException>(async () => {
																await (Session.UpdateAsync(entity)).ConfigureAwait(false);
																await (Session.FlushAsync()).ConfigureAwait(false);
															});
		}

		[Test]
		public async Task ShouldThrowIfDeleteOutsideActiveTransactionAsync()
		{
			var entity = new StrTestEntity { Str = "data" };
			using (var tx = Session.BeginTransaction())
			{
				await (Session.SaveAsync(entity)).ConfigureAwait(false);
				await (tx.CommitAsync()).ConfigureAwait(false);
			}
			// Illegal modification of entity state outside of active transaction.
			Assert.ThrowsAsync<AuditException>(async () =>
			                              	{
			                              		await (Session.DeleteAsync(entity)).ConfigureAwait(false);
			                              		await (Session.FlushAsync()).ConfigureAwait(false);
			                              	});
		}

		[Test]
		public async Task ShouldThrowIfCollectionUpdateOutsideActiveTransactionAsync()
		{
			var person = new Person();
			var name = new Name {TheName = "Name"};
			person.Names.Add(name);
			using (var tx = Session.BeginTransaction())
			{
				await (Session.SaveAsync(person)).ConfigureAwait(false);
				await (tx.CommitAsync()).ConfigureAwait(false);
			}
			// Illegal collection update outside of active transaction.
			person.Names.Remove(name);
			Assert.ThrowsAsync<AuditException>(async () =>
			                              	{
			                              		await (Session.UpdateAsync(person)).ConfigureAwait(false);
			                              		await (Session.FlushAsync()).ConfigureAwait(false);
			                              	});
		}

		[Test]
		public async Task ShouldThrowIfCollectionRemovalOutsideActiveTransactionAsync()
		{
			var person = new Person();
			var name = new Name {TheName = "Name"};
			person.Names.Add(name);
			using (var tx = Session.BeginTransaction())
			{
				await (Session.SaveAsync(person)).ConfigureAwait(false);
				await (tx.CommitAsync()).ConfigureAwait(false);
			}
			// Illegal collection update outside of active transaction.
			person.Names = null;
			Assert.ThrowsAsync<AuditException>(async () =>
			                              	{
			                              		await (Session.UpdateAsync(person)).ConfigureAwait(false);
			                              		await (Session.FlushAsync()).ConfigureAwait(false);
			                              	});
		}
	}
}