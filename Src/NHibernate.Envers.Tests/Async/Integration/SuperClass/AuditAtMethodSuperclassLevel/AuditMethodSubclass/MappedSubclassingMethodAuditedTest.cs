//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections.Generic;
using NHibernate.Envers.Exceptions;
using NUnit.Framework;
using SharpTestsEx;

namespace NHibernate.Envers.Tests.Integration.SuperClass.AuditAtMethodSuperclassLevel.AuditMethodSubclass
{
	using System.Threading.Tasks;
	public partial class MappedSubclassingMethodAuditedTest : TestBase
	{

		[Test]
		public async Task VerifyRevisionsCountsForAuditedAsync()
		{
			(await (AuditReader().GetRevisionsAsync(typeof(AuditedMethodSubclassEntity), id1_1)).ConfigureAwait(false))
				.Should().Have.SameSequenceAs(1, 2);
		}

		[Test]
		public void VerifyRevisionsCountsForNotAuditedAsync()
		{
			Assert.ThrowsAsync<NotAuditedException>(() =>
				AuditReader().GetRevisionsAsync(typeof(NotAuditedSubclassEntity), id2_1));
		}

		[Test]
		public async Task VerifyHistoryOfAuditedAsync()
		{
			var ver1 = new AuditedMethodSubclassEntity { Id = id1_1, Str = "ae", OtherStr = "super str", SubAuditedStr = "audited str" };
			var ver2 = new AuditedMethodSubclassEntity { Id = id1_1, Str = "ae new", OtherStr = "super str", SubAuditedStr = "audited str new" };

			var rev1 = await (AuditReader().FindAsync<AuditedMethodSubclassEntity>(id1_1, 1)).ConfigureAwait(false);
			var rev2 = await (AuditReader().FindAsync<AuditedMethodSubclassEntity>(id1_1, 2)).ConfigureAwait(false);

			//this property is not audited on superclass
			rev1.OtherStr.Should().Be.Null();
			rev2.OtherStr.Should().Be.Null();

			rev1.Should().Be.EqualTo(ver1);
			rev2.Should().Be.EqualTo(ver2);
		}

		[Test]
		public void VerifyHistoryOfNotAuditedAsync()
		{
			Assert.ThrowsAsync<NotAuditedException>(() =>
				AuditReader().FindAsync(typeof(NotAuditedSubclassEntity), id2_1, 1));
		}
	}
}