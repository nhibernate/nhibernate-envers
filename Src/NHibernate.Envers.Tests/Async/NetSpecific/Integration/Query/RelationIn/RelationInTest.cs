//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections.Generic;
using NHibernate.Envers.Exceptions;
using NHibernate.Envers.Query;
using NHibernate.Envers.Tests.Entities.OneToMany;
using NUnit.Framework;
using SharpTestsEx;

namespace NHibernate.Envers.Tests.NetSpecific.Integration.Query.RelationIn
{
	using System.Threading.Tasks;
	public partial class RelationInTest : TestBase
	{

		[Test]
		public async Task ShouldBeAbleToUseInOnSingleSideAsync()
		{
			(await (AuditReader().CreateQuery().ForRevisionsOf<SetRefIngEntity>()
				.Add(AuditEntity.Property("Reference").In(new List<SetRefEdEntity> { ed , edNotReferenced }))
				.Add(AuditEntity.Property("Data").Eq("bar"))
				.ResultsAsync()).ConfigureAwait(false)).Should().Contain(ing);
		}

		[Test]
		public void ShouldThrowUsingInOnCollectionAsync()
		{
			Assert.ThrowsAsync<AuditException>(() =>
			               AuditReader().CreateQuery().ForRevisionsOf<SetRefEdEntity>()
			                  .Add(AuditEntity.Property("Reffering").In(new List<SetRefIngEntity> {ing}))
			                  .ResultsAsync());
		}
	}
}