<?xml version='1.0' encoding="UTF-8"?>
<chapter id="queries">

	<title>Queries</title>

	<para>
		You can think of historic data as having two dimension. The first - horizontal -
		is the state of the database at a given revision. Thus, you can
		query for entities as they were at revision N. The second - vertical - are the
		revisions, at which entities changed. Hence, you can query for revisions,
		in which a given entity changed.
	</para>

	<para>
		The queries in Envers are similar to
		<ulink url="http://www.nhforge.org/doc/nh/en/index.html#querycriteria">NHibernate Criteria</ulink>,
		so if you are common with them, using Envers queries will be much easier.
	</para>

	<para>
		The main limitation of the current queries implementation is that you cannot
		traverse relations. You can only specify constraints on the ids of the
		related entities, and only on the "owning" side of the relation. This however
		will be changed in future releases.
	</para>

	<para>
		Please note, that queries on the audited data are usually a lot slower
		than corresponding queries on "live" data, as they involve correlated subselects.
	</para>

	<para>
		In the future, queries will be improved both in terms of speed and possibilities, when using the valid-time
		audit strategy, that is when storing both start and end revisions for entities. See
		<xref linkend="configuration"/>.
	</para>

	<section id="entities-at-revision">

		<title>Querying for entities of a class at a given revision</title>

		<para>
			The entry point for this type of queries is:
		</para>

		<programlisting>
			<![CDATA[var query = AuditReader().CreateQuery()
	.ForEntitiesAtRevision(typeof(MyEntity, revisionNumber);]]>
		</programlisting>

		<para>
			You can then specify constraints, which should be met by the entities returned, by
			adding restrictions, which can be obtained using the <literal>AuditEntity</literal>
			factory class. For example, to select only entities, where the "name" property
			is equal to "John":
		</para>

		<programlisting><![CDATA[query.Add(AuditEntity.Property("name").Eq("John"));]]></programlisting>

		<para>
			And to select only entites that are related to a given entity:
		</para>

		<programlisting>
			<![CDATA[query.Add(AuditEntity.Property("address").Eq(relatedEntityInstance));
// or
query.Add(AuditEntity.RelatedId("address").Eq(relatedEntityId));]]>
		</programlisting>

		<para>
			You can limit the number of results, order them, and set aggregations and projections
			(except grouping) in the usual way.
			When your query is complete, you can obtain the results by calling the
			<literal>SingleResult()</literal> or <literal>ResultList()</literal> methods.
		</para>

		<para>
			A full query, can look for example like this:
		</para>

		<programlisting>
			<![CDATA[var personsAtAddress = AuditReader().CreateQuery()
	 .ForEntitiesAtRevision(typeof(Person), 12)
	 .AddOrder(AuditEntity.property("surname").desc())
	 .Add(AuditEntity.relatedId("address").eq(addressId))
	 .SetFirstResult(4)
	 .SetMaxResults(2)
	 .ResultList();]]>
		</programlisting>

	</section>

	<section id="revisions-of-entity">

		<title>Querying for revisions, at which entities of a given class changed</title>

		<para>
			The entry point for this type of queries is:
		</para>

		<programlisting>
			<![CDATA[var query = AuditReader().CreateQuery()
	 .ForRevisionsOfEntity(typeof(MyEntity), false, true);]]>
		</programlisting>

		<para>
			You can add constraints to this query in the same way as to the previous one.
			There are some additional possibilities:
		</para>

		<orderedlist>
			<listitem>
				<para>
					Using <literal>AuditEntity.RevisionNumber</literal> you can specify constraints, projections
					and order on the revision number, in which the audited entity was modified
				</para>
			</listitem>
			<listitem>
				<para>
					Similarly, using <literal>AuditEntity.RevisionProperty(propertyName)</literal> you can specify constraints,
					projections and order on a property of the revision entity, corresponding to the revision
					in which the audited entity was modified
				</para>
			</listitem>
			<listitem>
				<para>
					<literal>AuditEntity.RevisionType</literal> gives you access as above to the type of
					the revision (ADD, MOD, DEL).
				</para>
			</listitem>
		</orderedlist>

		<para>
			Using these methods,
			you can order the query results by revision number, set projection or constraint
			the revision number to be greater or less than a specified value, etc. For example, the
			following query will select the smallest revision number, at which entity of class
			<literal>MyEntity</literal> with id <literal>entityId</literal> has changed, after revision
			number 42:
		</para>

		<programlisting>
			<![CDATA[var revision = AuditReader().CreateQuery()
	 .ForRevisionsOfEntity(typeof(MyEntity), false, true)
	 .SetProjection(AuditEntity.RevisionNumber.Min())
	 .Add(AuditEntity.Id.Eq(entityId))
	 .Add(AuditEntity.RevisionNumber().Gt(42))
	 .SingleResult();]]>
		</programlisting>

		<para>
			The second additional feature you can use in queries for revisions is the ability
			to maximalize/minimize a property. For example, if you want to select the
			revision, at which the value of the <literal>actualDate</literal> for a given entity
			was larger then a given value, but as small as possible:
		</para>

		<programlisting>
			<![CDATA[var revision = AuditReader().CreateQuery()
	 .ForRevisionsOfEntity(typeof(MyEntity), false, true)
	 // We are only interested in the first revision
	 .SetProjection(AuditEntity.RevisionNumber().Min())
	 .Add(AuditEntity.Property("actualDate").Minimize()
		  .Add(AuditEntity.Property("actualDate").Ge(givenDate))
		  .Add(AuditEntity.Id().Eq(givenEntityId)))
	 .SingleResult();
]]>
		</programlisting>

		<para>
			The <literal>Minimize()</literal> and <literal>Maximize()</literal> methods return a criteria,
			to which you can add constraints, which must be met by the entities with the
			maximized/minimized properties.
		</para>

		<para>
			You probably also noticed that there are two boolean parameters, passed when
			creating the query. The first one, <literal>selectEntitiesOnly</literal>, is only valid when
			you don't set an explicit projection. If true, the result of the query will be
			a list of entities (which changed at revisions satisfying the specified
			constraints).
		</para>

		<para>
			If false, the result will be a list of three element arrays. The
			first element will be the changed entity instance. The second will be an entity
			containing revision data (if no custom entity is used, this will be an instance
			of <literal>DefaultRevisionEntity</literal>). The third will be the type of the
			revision (one of the values of the <literal>RevisionType</literal> enumeration:
			ADD, MOD, DEL).
		</para>

		<para>
			The second parameter, <literal>selectDeletedEntities</literal>, specifies if revisions,
			in which the entity was deleted should be included in the results. If yes, such entities
			will have the revision type DEL and all fields, except the id,
			<literal>null</literal>.
		</para>

	</section>

	<section id="envers-tracking-modified-entities-queries">
		<title>Querying for entities modified in a given revision</title>
		<para>
			The basic query allows retrieving entity classes modified in a specified revision:
		</para>
		<programlisting>
			<![CDATA[List<Class> modifiedEntities = getAuditReader()
		 .findEntityTypesChangedInRevision(revisionNumber);]]>
		</programlisting>
		<para>
			Other queries (accessible from <interfacename>org.hibernate.envers.AuditReader</interfacename>):
		</para>
		<orderedlist>
			<listitem>
				<firstterm>
					<methodname>IEnumerable<![CDATA[<object>]]> FindEntitiesChangedInRevision(Number)</methodname>
				</firstterm>
				- Returns snapshots of all audited entities changed (added, updated and removed) in a given revision.
				Executes <literal>n+1</literal> SQL queries, where <literal>n</literal> is a number of different entity
				classes modified within specified revision.
			</listitem>
			<listitem>
				<firstterm>
					<methodname>IEnumerable<![CDATA[<object>]]> FindEntitiesChangedInRevision(Number, RevisionType)</methodname>
				</firstterm>
				- Returns snapshots of all audited entities changed (added, updated or removed) in a given revision
				filtered by modification type. Executes <literal>n+1</literal> SQL queries, where <literal>n</literal>
				is a number of different entity classes modified within specified revision.
			</listitem>
			<listitem>
				<firstterm>
					<methodname><![CDATA[IDictionary<RevisionType, IEnumerable<object>>]]> FindEntitiesChangedInRevisionGroupByRevisionType(long)</methodname>
				</firstterm>
				- Returns a map containing lists of entity snapshots grouped by modification operation (e.g.
				addition, update and removal). Executes <literal>3n+1</literal> SQL queries, where <literal>n</literal>
				is a number of different entity classes modified within specified revision.
			</listitem>
		</orderedlist>
		<para>
			Note that methods described above can be legally used only when default mechanism of
			tracking changed entity classes is enabled (see <xref linkend="envers-tracking-modified-entities-reventity"/>).
		</para>
	</section>

	<section id="session-extension-method">
		<title>
			<literal>Auditer()</literal>, an extension method on <literal>ISession</literal>
		</title>

		<para>
			The extension method <literal>Auditer()</literal> offers an alternative API to query Envers.

			<programlisting><![CDATA[IEnumerable<long> example = session.Auditer().GetRevisions<MyEntity>(id);]]></programlisting>
		</para>
	</section>
</chapter>
