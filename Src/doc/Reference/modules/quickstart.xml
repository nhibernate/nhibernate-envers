<?xml version='1.0' encoding="UTF-8"?>
<chapter id="quickstart">
	<title>Quickstart</title>
	
	<para>
        Out of the box, there are two ways to configure Envers,
		by attributes or by code.
    </para>
	
	<para>
		Simple attribute configuration
	</para>
	<programlisting>nhConf.IntegrateWithEnvers(); //attribute config by default
[...]

[Audited]
public class Person
[...]
	</programlisting>
		
	<para>
		Simple fluent configuration
	</para>
	<programlisting>var enversConf = new FluentConfiguration();
enversConf.Audit&lt;Person&gt;();
nhConf.IntegrateWithEnvers(enversConf);
	</programlisting>
	
	<para>
        And that's it! You create, modify and delete the entites as always. If you look
        at the generated schema, you will notice that it is unchanged by adding auditing
        for the Address and Person entities. Also, the data they hold is the same. There are,
        however, new tables, which store the historical data, whenever you commit a transaction.
    </para>
	
	<para>
        Instead of annotating the whole class and auditing all properties, you can annotate
        only some persistent properties with <literal>[Audited]</literal> (attributes)
		or use "Exclude" method to exclude non audited properties(fluent). 
    </para>
	
	<para>
        You can access the audit (history) of an entity using the <literal>IAuditReader</literal> interface, which you
        can obtain when having an open ISession.
    </para>
	
	<programlisting>var reader = AuditReaderFactory.Get(session);
var oldPerson = reader.Find(typeof(Person), personId, revision);
	</programlisting>
	
	<para>
        The <literal>T Find&lt;T&gt;(object primaryKey, long revision)</literal>
        method returns an entity with the given primary key, with the data it contained at
        the given revision. If the entity didn't exist at this revision, <literal>null</literal>
        is returned. Only the audited properties will be set on the returned entity.
        The rest will be <literal>null</literal>.
    </para>
	
	<para>
        You can also get a list of revisions at which an entity was modified using the
        <literal>GetRevisions</literal> method, as well as retrieve the date,
        at which a revision was created using the <literal>GetRevisionDate</literal> method.
    </para>
</chapter>
