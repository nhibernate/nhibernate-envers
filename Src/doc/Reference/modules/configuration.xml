<?xml version='1.0' encoding="UTF-8"?>
<chapter id="configuration">
	<title>Configuration</title>

	<section id="config-basics">
		<title>Basic configuration</title>

		<para>
			To start working with Envers, all configuration needed is to call
			the extension method IntegrateWithEnvers() on the NH Configuration object,
			as described in the <xref linkend="quickstart"/>.
		</para>

		<para>
			However, as Envers generates some entities and maps them to tables, it is possible to set the prefix and suffix
			that is added to the entity name to create an audit table for an entity, as well
			as set the names of the fields that are generated.
		</para>
	</section>

	<section id="config-audit-strategy">

		<title>Choosing an audit strategy</title>

		<para>
			After the basic configuration it is important to choose the audit strategy that will be used to persist and
			retrieve audit information. There is a trade-off between the performance of persisting and the performance
			of querying the audit information. Currently there two audit strategies:

			<orderedlist>
				<listitem>
					<para>
						The default audit strategy persists the audit data together with a start revision. For each row
						inserted, updated or deleted in an audited table, one or more rows are inserted in the audit tables,
						together with the start revision of its validity. Rows in the audit tables are never updated after insertion.
						Queries of audit information use subqueries to select the applicable rows in the audit tables.
						These subqueries are notoriously slow and difficult to index.
					</para>
				</listitem>
				<listitem>
					<para>
						The alternative is a validity audit strategy. This strategy stores the start-revision and the end-revision
						of audit information. For each row inserted, updated or deleted in an audited table, one or more rows
						are inserted in the audit tables, together with the start revision of its validity. But at the same time
						the end-revision field of the previous audit rows (if available) are set to this revision.
						Queries on the audit information can then use 'between start and end revision' instead of subqueries
						as used by the default audit strategy.
						The consequence of this strategy is that persisting audit information will be a bit slower, because of the
						extra updates involved, but retrieving audit information will be a lot faster. This can be improved by
						adding extra indexes.
					</para>
				</listitem>
			</orderedlist>
		</para>
	</section>

	<section id="config-reference">
		<title>Reference</title>

		<para>
			In more detail, below are the properties that you can pass to NHibernate.Cfg.Configuration.
			The property names are, from code, also available on ConfigurationKey class.
		</para>

		<table frame="topbot">
			<title>Envers Configuration Properties</title>
			<tgroup cols="3">
				<colspec colname="c1" colwidth="1*"/>
				<colspec colname="c2" colwidth="1*"/>
				<colspec colname="c2" colwidth="1*"/>
				<thead>
					<row>
						<entry>
							Property name
						</entry>
						<entry>Default value</entry>
						<entry>Description</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>
							nhibernate.envers.audit_table_prefix
						</entry>
						<entry>

						</entry>
						<entry>
							String that will be prepended to the name of an audited entity to create
							the name of the entity, that will hold audit information.
						</entry>
					</row>
					<row>
						<entry>
							nhibernate.envers.audit_table_suffix
						</entry>
						<entry>
							_AUD
						</entry>
						<entry>
							String that will be appended to the name of an audited entity to create
							the name of the entity, that will hold audit information. If you
							audit an entity with a table name Person, in the default setting Envers
							will generate a <literal>Person_AUD</literal> table to store historical data.
						</entry>
					</row>
					<row>
						<entry>
							nhibernate.envers.revision_field_name
						</entry>
						<entry>
							REV
						</entry>
						<entry>
							Name of a field in the audit entity that will hold the revision number.
						</entry>
					</row>
					<row>
						<entry>
							nhibernate.envers.revision_type_field_name
						</entry>
						<entry>
							REVTYPE
						</entry>
						<entry>
							Name of a field in the audit entity that will hold the type of the
							revision (currently, this can be: add, mod, del).
						</entry>
					</row>
					<row>
						<entry>
							nhibernate.envers.revision_on_collection_change
						</entry>
						<entry>
							true
						</entry>
						<entry>
							Should a revision be generated when a not-owned relation field changes
							(this can be either a collection in a one-to-many relation, or the field
							using "mappedBy" attribute in a one-to-one relation).
						</entry>
					</row>
					<row>
						<entry>
							nhibernate.envers.do_not_audit_optimistic_locking_field
						</entry>
						<entry>
							true
						</entry>
						<entry>
							When true, properties to be used for optimistic locking will be automatically not audited
							(their history won't be stored; it normally doesn't make sense to store it).
						</entry>
					</row>
					<row>
						<entry>
							nhibernate.envers.store_data_at_delete
						</entry>
						<entry>
							false
						</entry>
						<entry>
							Should the entity data be stored in the revision when the entity is deleted (instead of only
							storing the id and all other properties as null). This is normally not needed, as the data is
							present in the last-but-one revision. Sometimes, however, it is easier and more efficient to
							access it in the last revision (then the data that the entity contained before deletion is
							stored twice).
						</entry>
					</row>
					<row>
						<entry>
							nhibernate.envers.default_schema
						</entry>
						<entry>
							null (same as normal tables)
						</entry>
						<entry>
							The default schema name that should be used for audit tables. Can be overriden using the
							<literal>[AuditTable(schema="...")]</literal> attribute. If not present, the schema will
							be the same as the schema of the normal tables.
						</entry>
					</row>
					<row>
						<entry>
							nhibernate.envers.default_catalog
						</entry>
						<entry>
							null (same as normal tables)
						</entry>
						<entry>
							The default catalog name that should be used for audit tables. Can be overriden using the
							<literal>[AuditTable(catalog="...")]</literal> attribute. If not present, the catalog will
							be the same as the catalog of the normal tables.
						</entry>
					</row>
					<row>
						<entry>
							nhibernate.envers.audit_strategy
						</entry>
						<entry>
							NHibernate.Envers.Strategy.DefaultAuditStrategy
						</entry>
						<entry>
							The audit strategy that should be used when persisting audit data. The default stores only the
							revision, at which an entity was modified. An alternative, the
							<literal>NHibernate.Envers.Strategy.ValidityAuditStrategy</literal> stores both the
							start revision and the end revision. Together these define when an audit row was valid, hence
							the name ValidityAuditStrategy.
						</entry>
					</row>
					<row>
						<entry>
							nhibernate.envers.audit_strategy_validity_end_rev_field_name
						</entry>
						<entry>
							REVEND
						</entry>
						<entry>
							The column name that will hold the end revision number in audit entities. This property is only
							valid if the validity audit strategy is used.
						</entry>
					</row>
					<row>
						<entry>
							nhibernate.envers.audit_strategy_validity_store_revend_timestamp
						</entry>
						<entry>
							false
						</entry>
						<entry>
							Should the timestamp of the end revision be stored, until which the data was valid, in addition to the end revision itself.
							This is useful to be able to purge old Audit records out of a relational database by using table partitioning.
							Partitioning requires a column that exists within the table.
							This property is only evaluated if the ValidityAuditStrategy is used.
						</entry>
					</row>
					<row>
						<entry>
							nhibernate.envers.audit_strategy_validity_revend_timestamp_field_name
						</entry>
						<entry>
							REVEND_TSTMP
						</entry>
						<entry>
							Column name of the timestamp of the end revision until which the data was valid.
							Only used if the ValidityAuditStrategy is used, and
							nhibernate.envers.audit_strategy_validity_store_revend_timestamp evaluates to true
						</entry>
					</row>
					<row>
						<entry>
							nhibernate.envers.track_entities_changed_in_revision
						</entry>
						<entry>
							false
						</entry>
						<entry>
							Should entity types, that have been modified during each revision, be tracked. The default
							implementation creates <literal>REVCHANGES</literal> table that stores entity names
							of modified persistent objects. Single record encapsulates the revision identifier
							(foreign key to <literal>REVINFO</literal> table) and a string value. For more
							information refer to <xref linkend="envers-tracking-modified-entities-revchanges"/>
							and <xref linkend="envers-tracking-modified-entities-queries"/>.
						</entry>
					</row>
					<row>
						<entry>
							nhibernate.envers.global_with_modified_flag
						</entry>
						<entry>
							false, can be individually overriden with <literal>[Audited(WithModifiedFlag=true)]</literal>
						</entry>
						<entry>
							Should property modification flags be stored for all audited entities and all properties.
							When set to true, for all properties an additional boolean column in the audit tables will
							be created, filled with information if the given property changed in the given revision.
							When set to false, such column can be added to selected entities or properties using the
							<literal>[Audited]</literal> attribute.
							For more information refer to <xref linkend="envers-tracking-properties-changes"/>
							and <xref linkend="envers-envers-tracking-properties-changes-queries"/>.
						</entry>
					</row>
					<row>
						<entry>
							nhibernate.envers.modified_flag_suffix
						</entry>
						<entry>
							_MOD
						</entry>
						<entry>
							The suffix for columns storing "Modified Flags".
							For example: a property called "age", will by default get modified flag with column name "age_MOD".
						</entry>
					</row>
					<row>
						<entry>
							nhibernate.envers.collection_proxy_mapper_factory
						</entry>
						<entry>
							NHibernate.Envers.Configuration.Metadata.DefaultCollectionProxyMapperFactory
						</entry>
						<entry>
							Responsible to create collection proxies for audited entities.
							May be used if NHibernate Core isn't using its normal types for its mapped collections,
							eg if a user defined CollectionTypeFactory is used.
						</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
		<important>
			<para>
				The following configuration options have been added recently and should be regarded as experimental:
				<orderedlist>
					<listitem>
						org.hibernate.envers.track_entities_changed_in_revision
					</listitem>
					<listitem>
						nhibernate.envers.global_with_modified_flag
					</listitem>
					<listitem>
						nhibernate.envers.modified_flag_suffix
					</listitem>
				</orderedlist>
			</para>
		</important>
	</section>

	<section>
		<title>Additional mapping annotations</title>
		
		<para>
			To change the name of the revision table and its fields (the table, in which the
			numbers of revisions and their timestamps are stored), you can use the
			<literal>[RevisionEntity]</literal> attribute.
			For more information, see <xref linkend="revisionlog"/>.
		</para>

		<para>
			To set the value of any of the properties described above, simply add an entry to
			your <literal>hibernate.cfg.xml</literal> (or to NH's <literal>Configuration</literal> object).
		</para>

		<para>
			You can also set the name of the audit table on a per-entity basis, using the
			<literal>[AuditTable]</literal> attribute. It may be tedious to add this
			annotation to every audited entity, so if possible, it's better to use a prefix/suffix.
		</para>

		<para>
			If you have a mapping with join tables, audit tables for them will be generated in
			the same way (by adding the prefix and suffix). If you wish to overwrite this behaviour,
			you can use the <literal>[JoinAuditTable]</literal> attribute.
		</para>

		<para>
			If you'd like to override auditing behaviour of some fields/properties inherited from
			a non mapped base type or in an embedded component, you can apply the <literal>[AuditOverride]</literal> 
			attribute on the subtype or usage site of the component.
		</para>

		<para>
			If you want to audit a relation, where the target entity is not audited (that is the case for example with
			dictionary-like entities, which don't change and don't have to be audited), just annotate it with
			<literal>[Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED]</literal>
			(or use fluent configuration: <literal>ExcludeRelationData()</literal>). Then, when reading historic
			versions of your entity, the relation will always point to the "current" related entity.
		</para>

		<para>
			If you'd like to audit properties of a superclass of an entity, which are not explicitly audited (which
			don't have the <literal>AuditedAttribute</literal> on any properties or on the class),
			use <literal>[AuditOverride(ForClass = typeof(SomeEntity), IsAudited = true/false)]</literal>.
		</para>
	</section>
</chapter>
